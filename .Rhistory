stop(paste0(bnamei, ": benchmark and indicator period don't match"), call. = FALSE)
if(end(yi)[1] < end(benchmarks_ts)[1]){
xi <- window(xi, end = c(end(yi)[1], freq))
}
xi1 <- if (is.mts(xi)) xi[,1] else xi
xi1_in_sample <- window(xi1, start = start(yi), end = c(end(yi)[1], freq))
n_ext <- length(xi1) - length(xi1_in_sample)
## Annual BI ratios
biYi <- calc_annual_bi_ratio(yi, xi1, conversion)
## Model selection
if (is.list(model)){
modi <- tolower(model[names(model) == bnamei])
if (length(modi) == 0){
modi <- "mbdenton"
warning(paste0(bnamei, ": model not defined. mbDenton is used by default."), call. = FALSE)
}
} else {
modi <- tolower(model)
}
if (!modi %in% c("mbdenton", "chow-lin", "fernandez", "litterman", "chow-lin_no_cst")){
modi <- "mbdenton"
warning(paste0(bnamei, ": model not allowed. mbDenton was used instead by default."), call. = FALSE)
}
if (modi == "mbdenton" && is.matrix(xi)){
xi <- xi[,1]
warning(paste0(bnamei, ": mbDenton do not handle multiple indicators. Only the first indicator is considered."), call. = FALSE)
}
## Outliers
if (is.null(outliers)){
outli <- outli_int <- NULL
} else {
if (bnamei %in% names(outliers)){
outli_int <- outliers[names(outliers)==bnamei][[1]]
outli_char <- names(outli_int)
outli <- sapply(outli_char,
function(x) decimal_date2(as.numeric(substr(x,1,4)), as.numeric(substr(x,5,6)), freq))
} else {
outli <- outli_int <- NULL
}
if(!is.null(outli)){
for(k in 1:length(outli)){
outli_yr <- as.numeric(substr(outli[k], 1, 4))
if(outli_yr < start(yi)[1] || outli_yr > end(yi)[1]){
outli <- outli[-k]
outli_int <- outli_int[-k]
warning(paste0(bnamei, ": Some outliers are defined outside the domain. Those are ignored."), call. = FALSE)
}
}
if(length(outli) == 0) outli <- outli_int <- NULL
}
}
## Fixed disagregated BI
if (is.null(disagBIfixed)){
dBIfixi <- NULL
} else {
if (bnamei %in% names(disagBIfixed)){
dBIfixi_value <- disagBIfixed[names(disagBIfixed) == bnamei][[1]]
dBIfixi_date_char <- names(dBIfixi_value)
dBIfixi_date <- sapply(dBIfixi_date_char,
function(x) decimal_date2(as.numeric(substr(x,1,4)), as.numeric(substr(x,5,6)), freq))
dBIfixi <- cbind(period = dBIfixi_date, bi_ratio = dBIfixi_value)
if (length(dBIfixi_value) %% freq != 0){
warning(paste0(bnamei, ": the fixed disaggregated BI ratio provided do not cover the entire year. They are ignored for the series."), call. = FALSE)
dBIfixi <- NULL
}
} else {
dBIfixi <- NULL
}
if(!is.null(dBIfixi)){
for(k in nrow(dBIfixi):1){
dBIfixi_yr <- floor(dBIfixi[k,1])
if(dBIfixi_yr < start(yi)[1] || dBIfixi_yr > end(yi)[1]){
dBIfixi <- dBIfixi[-k,, drop = FALSE]
}
}
if(length(dBIfixi) == 0) dBIfixi <- NULL
}
}
dBIfixi
nobs_bench <- min(length(yi), 100)
qx <- table_rw[series_length == nobs_bench, get(forecastBI.quantile)]
## Forecast annual BI
if (forecastBI == "none" || end(yi)[1] < end(benchmarks_ts)[1]){
fbiYi <- list(f = NULL, falt = NULL)
} else if (forecastBI == "auto"){
fbiYi <- if (modi == "mbdenton")
forecast_annual_bi(biYi, critical_value = qx)
else
list(f = NULL, falt = NULL)
} else if (forecastBI == "userdefined+none"){
f_user <- forecastBI.values[names(forecastBI.values) == bnamei]
f <- if (!length(f_user) == 0) f_user[[1]] else NULL
fbiYi <- list(f = f, falt = NULL)
} else if (forecastBI == "userdefined+auto"){
f_user <- forecastBI.values[names(forecastBI.values) == bnamei]
if (!length(f_user) == 0){
f <- f_user[[1]]
falt <- forecast_annual_bi(biYi, critical_value=qx)[[1]]
} else {
if (modi == "mbdenton"){
f <- forecast_annual_bi(biYi, critical_value = qx)[[1]]
falt <- forecast_annual_bi(biYi, critical_value = qx)[[2]]
} else {
f <- falt <- NULL
}
}
fbiYi <- list(f=f, falt=falt)
}
is.null(fbiYi[[1]])
rslti <- mbdenton(
xi,
yi,
outliers = outli,
outliers.intensity = outli_int,
manual_disagBI = dBIfixi,
conversion,
series_name = bnamei
)
rslti
bi <- rslti[["beta"]]
ebi <- rslti[["betaSD"]]
disag <- rslti[["disag"]]
edisag <- xi * ebi
parameters <- cbind(beta_t = bi, stderr = ebi)
decomp <- list(regeffect = disag, smoothingpart = ts(rep(0,length(disag)), start=start(disag), frequency = frequency(disag)))
ll <- rslti[["ll"]]
enhanced <- FALSE
bi
benchmarks <- benchmarks2
indicators <- indicators2
model = "mbDenton"
outliers = NULL
disagBIfixed = list(`09630`=c("20190101"=0.0, "20190401"=0.0, "20190701"=0.0, "20191001"=0.0,
"20200101"=0.0, "20200401"=0.0, "20200701"=0.0, "20201001"=0.0,
"20210101"=0.0, "20210401"=0.0, "20210701"=0.0, "20211001"=0.0,
"20220101"=0.0, "20220401"=0.0, "20220701"=0.0, "20221001"=0.0,
"20230101"=0.0, "20230401"=0.0, "20230701"=0.0, "20231001"=0.0))
#disagBIfixed = NULL
forecastBI = "userdefined+auto"
forecastBI.values = NULL
forecastBI.quantile = "q.95"
freezeT1 = FALSE
conversion = "Sum"
path_xlsx = NULL
i
bnamei <- if (is.mts(benchmarks_ts)) colnames(benchmarks_ts)[i] else "series"
yid <- if (is.mts(benchmarks_ts)) benchmarks_ts[, i, drop=FALSE] else benchmarks_ts
xid <- match_indicators(bnamei, indicators_ts)
yi <- zoo::na.trim(yid)
xi <- zoo::na.trim(xid)
if (anyNA(yi) || anyNA(xi))
stop(paste0(bnamei, "inner missing observations are not handled"), call. = FALSE)
if(start(xi)[1] < start(yi)[1])
stop(paste0(bnamei, ": benchmark and indicator period don't match"), call. = FALSE)
if(end(yi)[1] < end(benchmarks_ts)[1]){
xi <- window(xi, end = c(end(yi)[1], freq))
}
xi1 <- if (is.mts(xi)) xi[,1] else xi
xi1_in_sample <- window(xi1, start = start(yi), end = c(end(yi)[1], freq))
n_ext <- length(xi1) - length(xi1_in_sample)
## Annual BI ratios
biYi <- calc_annual_bi_ratio(yi, xi1, conversion)
## Model selection
if (is.list(model)){
modi <- tolower(model[names(model) == bnamei])
if (length(modi) == 0){
modi <- "mbdenton"
warning(paste0(bnamei, ": model not defined. mbDenton is used by default."), call. = FALSE)
}
} else {
modi <- tolower(model)
}
if (!modi %in% c("mbdenton", "chow-lin", "fernandez", "litterman", "chow-lin_no_cst")){
modi <- "mbdenton"
warning(paste0(bnamei, ": model not allowed. mbDenton was used instead by default."), call. = FALSE)
}
if (modi == "mbdenton" && is.matrix(xi)){
xi <- xi[,1]
warning(paste0(bnamei, ": mbDenton do not handle multiple indicators. Only the first indicator is considered."), call. = FALSE)
}
## Outliers
if (is.null(outliers)){
outli <- outli_int <- NULL
} else {
if (bnamei %in% names(outliers)){
outli_int <- outliers[names(outliers)==bnamei][[1]]
outli_char <- names(outli_int)
outli <- sapply(outli_char,
function(x) decimal_date2(as.numeric(substr(x,1,4)), as.numeric(substr(x,5,6)), freq))
} else {
outli <- outli_int <- NULL
}
if(!is.null(outli)){
for(k in 1:length(outli)){
outli_yr <- as.numeric(substr(outli[k], 1, 4))
if(outli_yr < start(yi)[1] || outli_yr > end(yi)[1]){
outli <- outli[-k]
outli_int <- outli_int[-k]
warning(paste0(bnamei, ": Some outliers are defined outside the domain. Those are ignored."), call. = FALSE)
}
}
if(length(outli) == 0) outli <- outli_int <- NULL
}
}
if (is.null(disagBIfixed)){
dBIfixi <- NULL
} else {
if (bnamei %in% names(disagBIfixed)){
dBIfixi_value <- disagBIfixed[names(disagBIfixed) == bnamei][[1]]
dBIfixi_date_char <- names(dBIfixi_value)
dBIfixi_date <- sapply(dBIfixi_date_char,
function(x) decimal_date2(as.numeric(substr(x,1,4)), as.numeric(substr(x,5,6)), freq))
dBIfixi <- cbind(period = dBIfixi_date, bi_ratio = dBIfixi_value)
if (length(dBIfixi_value) %% freq != 0){
warning(paste0(bnamei, ": the fixed disaggregated BI ratio provided do not cover the entire year. They are ignored for the series."), call. = FALSE)
dBIfixi <- NULL
}
} else {
dBIfixi <- NULL
}
if(!is.null(dBIfixi)){
for(k in nrow(dBIfixi):1){
dBIfixi_yr <- floor(dBIfixi[k,1])
if(dBIfixi_yr < start(yi)[1] || dBIfixi_yr > end(yi)[1]){
dBIfixi <- dBIfixi[-k,, drop = FALSE]
}
}
if(length(dBIfixi) == 0) dBIfixi <- NULL
}
}
dBIfixi
nobs_bench <- min(length(yi), 100)
qx <- table_rw[series_length == nobs_bench, get(forecastBI.quantile)]
## Forecast annual BI
if (forecastBI == "none" || end(yi)[1] < end(benchmarks_ts)[1]){
fbiYi <- list(f = NULL, falt = NULL)
} else if (forecastBI == "auto"){
fbiYi <- if (modi == "mbdenton")
forecast_annual_bi(biYi, critical_value = qx)
else
list(f = NULL, falt = NULL)
} else if (forecastBI == "userdefined+none"){
f_user <- forecastBI.values[names(forecastBI.values) == bnamei]
f <- if (!length(f_user) == 0) f_user[[1]] else NULL
fbiYi <- list(f = f, falt = NULL)
} else if (forecastBI == "userdefined+auto"){
f_user <- forecastBI.values[names(forecastBI.values) == bnamei]
if (!length(f_user) == 0){
f <- f_user[[1]]
falt <- forecast_annual_bi(biYi, critical_value=qx)[[1]]
} else {
if (modi == "mbdenton"){
f <- forecast_annual_bi(biYi, critical_value = qx)[[1]]
falt <- forecast_annual_bi(biYi, critical_value = qx)[[2]]
} else {
f <- falt <- NULL
}
}
fbiYi <- list(f=f, falt=falt)
}
is.null(fbiYi[[1]])
if ((n_ext > freq && n_ext < freq * 2) || (n_ext == freq && !freezeT1)) {
yi_enhanced <- extend_benchmark_series(yi, xi, fbiYi[[1]][1], conversion)
} else if (n_ext >= freq * 2) {
stop("Out-of-sample period with enhanced model-based Denton must be < 2 years.")
} else {
yi_enhanced <- yi
}
yi_enhanced
rslti <- mbdenton(
xi,
yi_enhanced,
outliers = outli,
outliers.intensity = outli_int,
manual_disagBI = dBIfixi,
conversion,
series_name = bnamei
)
disagbi_base <- window(rslti[["beta"]], end = c(end(yi_enhanced)[1], freq))
fbiYi_touse <- if (length(yi_enhanced) > length(yi)) as.numeric(fbiYi[[1]][2]) else as.numeric(fbiYi[[1]][1])
disagbi <- extrapolate_infra_annual_BI_ratio(disagbi_base, fbiYi_touse, freq, yi_enhanced, xi, dBIfixi, conversion)
bi <- window(disagbi, frequency = freq, end = end(xi))
ebi <- ts(c(window(rslti[["betaSD"]], frequency=freq, end=c(end(yi_enhanced)[1]-1,freq)), rep(NA,(n_ext+freq))),
frequency = freq,start = start(xi), end = end(xi))
disag <- xi * bi
edisag <- xi * ebi
parameters <- cbind(beta_t = bi, stderr = ebi)
decomp <- list(regeffect = disag, smoothingpart = ts(rep(0,length(disag)), start=start(disag), frequency = frequency(disag)))
ll <- rslti[["ll"]]
enhanced <- TRUE
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
disag_BI_fixed
disag_BI_fixed_list
disag_BI_fixed_list_form
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
i
disagBIfixed
dBIfixi_value
dBIfixi_date_char
dBIfixi_date
dBIfixi_date_char
decimal_date2(as.numeric(substr("2019-03-01",1,4)), as.numeric(substr("2019-03-01",5,6)), freq)
as.numeric(substr(x,1,4))
yr<-2019
mth<-3
freq<-4
qtr <- (mth + 2L) %/% 3L
qtr
as.numeric(time(ts(start = c(yr, qtr), frequency = freq)))
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
yr
mth
freq
qtr <- (mth + 2L) %/% 3L
qtr
as.numeric(time(ts(start = c(yr, qtr), frequency = freq)))
ts(start = c(yr, qtr)
, frequency = freq)
ts(start = c(yr, qtr), frequency = freq)
ts(start = c(2019, 1), frequency = 4)
ts(start = c(2019, 0), frequency = 4)
ts(2, start = c(2019, 0), frequency = 4)
substr("2019-03-01",5,6)
substr("2019-12-01",5,6)
dBIfixi_date_char
substr("20190101",5,6)
substr("20190101",5,6)
as.numeric(substr("20190101",5,6))
as.numeric(substr("20190401",5,6))
as.numeric(substr("20190901",5,6))
as.numeric(substr("20191201",5,6))
as.numeric(substr("20190201",5,6))
as.numeric(substr("20190301",5,6))
as.numeric(substr("20190501",5,6))
as.numeric(substr("20190601",5,6))
dBIfixi_date_char
x<-dBIfixi_date_char[1]
decimal_date2(as.numeric(substr(x,1,4)), as.numeric(substr(x,5,6)), freq)
mth
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
dBIfixi_date_char
dBIfixi_date
disagBIfixed
?multiTD
disag_BI_fixed <- as.data.frame(read_excel(path_data, sheet = "disag_BI_fixed"))
path_data<-"E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx"
disag_BI_fixed <- as.data.frame(read_excel(path_data, sheet = "disag_BI_fixed"))
disag_BI_fixed
disag_BI_fixed_list <- split(disag_BI_fixed[, c("period", "value")], disag_BI_fixed$series_name)
disag_BI_fixed_list
disag_BI_fixed_list_form <- lapply(disag_BI_fixed_list, function(x) df_to_vector(x))
disag_BI_fixed_list_form
disag_BI_fixed
str(disag_BI_fixed)
disag_BI_fixed$period <- format(disag_BI_fixed$period, "%Y%m%d")
disag_BI_fixed$period
is.Date(disag_BI_fixed$period)
disag_BI_fixed <- as.data.frame(read_excel(path_data, sheet = "disag_BI_fixed"))
is.Date(disag_BI_fixed$period)
is.POSIXct(disag_BI_fixed)
is.POSIXct(disag_BI_fixed$period)
disag_BI_fixed <- as.data.frame(read_excel(path_data, sheet = "disag_BI_fixed"))
disag_BI_fixed$period <- format(disag_BI_fixed$period, "%Y%m%d")
disag_BI_fixed
disag_BI_fixed$period <- format(disag_BI_fixed$period, "%Y%m%d")
disag_BI_fixed$period
class(disag_BI_fixed)
str(disag_BI_fixed)
disag_BI_fixed <- as.data.frame(read_excel(path_data, sheet = "disag_BI_fixed"))
if(is.POSIXct(disag_BI_fixed$period)){
disag_BI_fixed$period <- format(disag_BI_fixed$period, "%Y%m%d")
}
if (nrow(disag_BI_fixed) != 0) {
disag_BI_fixed_list <- split(disag_BI_fixed[, c("period", "value")], disag_BI_fixed$series_name)
disag_BI_fixed_list_form <- lapply(disag_BI_fixed_list, function(x) df_to_vector(x))
} else {
disag_BI_fixed_list_form <- NULL
}
disag_BI_fixed_list_form
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
rslt2_bis$td_series
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/enhancedDenton.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
rslt2_bis$td_series
rslt2_bis$bi_annual_f
rslt2_bis$bi_annual_falt
rslt<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/Input pub q4_2024 60d STEP 3.xlsx",
forecastBI = "userdefined+auto",
freezeT1 = TRUE,
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput 3.xlsx")
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/Input pub q4_2024 60d STEP 3.xlsx",
forecastBI = "userdefined+auto",
freezeT1 = TRUE,
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput 3.xlsx")
disag_BI_fixed
str(disag_BI_fixed)
?format
test <- as.POSIXct("2019-03-01")
test
format(disag_BI_fixed$period, "%Y%m%d")
format(test, "%Y%m%d")
test2<-as.Date("2019-03-01")
test2
format(test2, "%Y%m%d")
is.Date(disag_BI_fixed$period)
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
benchmarks <- as.data.frame(read_excel("E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2020_2023.xlsx",
sheet = "benchmarks"))
indicators <- as.data.frame(read_excel("E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2020_2023.xlsx",
sheet = "indicators"))
rslt<-multiTD(benchmarks, indicators)
rslt_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2020_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput P3.xlsx")
i
biYi
qx
nobs_bench
get(forecastBI.quantile)
table_rw
forecastBI.quantile = "q.95"
get(forecastBI.quantile)
forecastBI.quantile
nobs_bench
table_rw[series_length == 4,]
qx
length(0.4)
length(qx)
alt_wd
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/enhancedDenton.R", echo=TRUE)
rslt_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2020_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput P3.xlsx")
source("E:/Documents/LEMASSO/r_own_packages/nbbTD/R/multiTD.R", echo=TRUE)
rslt_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2020_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput P3.xlsx")
rslt_bis$td_series
rslt<-multiTD(benchmarks, indicators)
runShiny(rslt_bis)
rslt<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/Input pub q4_2024 60d STEP 3.xlsx",
forecastBI = "userdefined+auto",
freezeT1 = TRUE,
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput 3.xlsx")
runShiny(rslt)
install.packages("E:/Documents/LEMASSO/r_own_packages/nbbTD_1.1.1.tar.gz", repos = NULL, type = "source")
library(nbbTD)
rslt<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/Input pub q4_2024 60d STEP 3.xlsx",
forecastBI = "userdefined+auto",
freezeT1 = TRUE,
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput 3.xlsx")
?is.POSIXct
inherits(2, "POSIXct")
test<-as.Date("2019-09-03")
test
class(test)
inherits(test, "Date")
inherits(c(test,test), "Date")
install.packages("E:/Documents/LEMASSO/r_own_packages/nbbTD_1.1.1.tar.gz", repos = NULL, type = "source")
################################################################################
################################################################################
################################################################################
library(nbbTD)
rslt<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/Input pub q4_2024 60d STEP 3.xlsx",
forecastBI = "userdefined+auto",
freezeT1 = TRUE,
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput 3.xlsx")
rslt<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/Input pub q1_2025 60d STEP 3.xlsx",
forecastBI = "userdefined+auto",
freezeT1 = TRUE,
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput 3.xlsx")
rslt<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/Input pub q1_2025 60d STEP 3.xlsx",
forecastBI = "userdefined+auto",
freezeT1 = TRUE,
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput 3.xlsx")
rslt2_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2012_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput myoutput P3_2.xlsx")
rslt2_bis$td_series
rslt_bis<-multiTD_fromXLSX(path_data = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/INPUT_ECOMMERCE_2020_2023.xlsx",
forecastBI = "userdefined+auto",
path_output = "E:/Documents/LEMASSO/Temporal disaggregation/nbbTD/nbbTD/myoutput P3.xlsx")
rslt_bis$td_series
